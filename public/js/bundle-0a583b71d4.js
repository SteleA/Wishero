var app=angular.module("Wishero",["ui.router","angular-md5","ngMaterial"]);app.run(["$rootScope","$state","Auth","User",function(e,t,n,a){a.init(),e.$on("$stateChangeSuccess",function(e,n){ga("send","pageview","/"+t.current.name)}),e.$on("$stateChangeStart",function(e,o){a.isInit(function(){(o.authenticate||o.hasRole)&&(a.getUser()||(e.preventDefault(),t.go("main")),"admin"===o.hasRole&&n.userIs().then(function(e){o.hasRole===e.data.role}))})})}]),app.config(["$locationProvider","$httpProvider",function(e,t){e.html5Mode(!0),t.interceptors.push("AuthInterceptor")}]),app.run(["User",function(e){ga("create","UA-71680176-1","auto"),ga("send","pageview")}]);
app.controller("AppCtrl",["$scope","MetaSettings",function(p,t){p.page=t}]);
app.config(["$stateProvider","$urlRouterProvider",function(t,l){l.otherwise("/"),t.state("main",{url:"/",templateUrl:"app/Main/main.html",controller:"MainCtrl"}).state("about",{url:"/about",templateUrl:"app/About/about.html",controller:"AboutCtrl"}).state("privacy",{url:"/privacy",templateUrl:"app/Privacy/privacy.html",controller:"PrivacyCtrl"}).state("token",{url:"/token/:token",controller:"TokenCtrl"}).state("wishlist",{url:"/wishlist/:username/:id",templateUrl:"app/Wishlist/wishlist.html",controller:"WishlistCtrl"}).state("createWishlist",{controller:["$state","Wishlist","User",function(t,l,e){l.createWishlist({name:"New wishlist"}).success(function(l){e.createWishlist(l),t.go("wishlist",{username:e.getUser().username,id:l._id})})}]}).state("login",{url:"/login",templateUrl:"app/Account/Login/login.html",controller:"LoginCtrl"}).state("forgot",{url:"/forgot",templateUrl:"app/Account/Forgot/forgot.html",controller:"ForgotCtrl"}).state("resetPassword",{url:"/resetPassword/:forgotPasswordToken",templateUrl:"app/Account/Forgot/reset.html",controller:"ResetCtrl"}).state("signup",{url:"/signup",templateUrl:"app/Account/Signup/signup.html",controller:"SignupCtrl as signupCtrl"}).state("profile",{url:"/profile",templateUrl:"app/Account/Profile/profile.html",controller:"ProfileCtrl",authenticate:!0}).state("settings",{url:"/settings",templateUrl:"app/Account/Settings/settings.html",controller:"SettingsCtrl",authenticate:!0}).state("admin",{url:"/admin",templateUrl:"app/Account/Admin/admin.html",controller:"AdminCtrl",hasRole:"admin"}).state("user",{url:"/:username",templateUrl:"app/User/public.html",controller:"UserCtrl"})}]);

app.controller("AboutCtrl",["$scope","MetaSettings",function(t,e){e.setTitle("About"),e.setDesc("What is Wishero?")}]);
app.directive("clickToSelect",function(){return{link:function(n,e,t){e.on("click",function(){setTimeout(function(){e[0].setSelectionRange(0,e[0].value.length)},10)})}}});
app.directive("fileread",["upload","Wishlist","$http","User",function(i,e,t,n){return{scope:{fileread:"=",wish:"@",wl:"@"},link:function(t,r,a){function l(i){return i?t.$emit("error",i):(d.wishlistId=u._id,n.updateWishlistItem(d),mixpanel.track("Wishlist item picture uploaded"),void e.updateItem(u,d))}var u,d,p,s=r.parent().find("input");r.bind("click",function(){r.parent().find("input")[0].click()}),s.bind("change",function(e){t.$apply(function(){t.fileread=e.target.files[0],u=JSON.parse(a.wl),d=JSON.parse(a.wish),p=e.target.files[0],i.getSignature(p,function(e,n){return e?t.$emit("error",e):(d.img=n.url,p.name=n.fileName,void i.uploadFile(p,n.signed_request,l))})})})}}}]);
app.directive("pil",function(){return{link:function(n,t){var i;setTimeout(function(){t.parent().addClass("loadingPicture"),i=t.attr("src"),t.css("opacity",0)},10),t.bind("load",function(){setTimeout(function(){t.addClass("animated fadeIn"),t.parent().removeClass("loadingPicture")},300)})}}});
app.directive("uploadPicture",["upload","Auth","$http","imageService","$rootScope",function(e,n,r,t,i){return{scope:{},link:function(n,r,o){for(var a,c,l,u=r.parent().children(),d=0;d<u.length;d++)u[d].dataset.pic&&(l=u[d]);l.addEventListener("click",function(){r[0].click()}),r.bind("change",function(o){a=o.target.files[0];var l=(r.parent().find("img")[0].src,new Image),u=new FileReader;u.readAsDataURL(a),u.onload=function(){var e=this.result;r.parent().find("img")[0].src=e,l.src=e},u.onabort=function(){i.emit("error","The upload was aborted.")},u.onerror=function(){i.emit("error","An error occured while reading the file.")},l.onload=function(){t.resizeStep(l,500,500).then(function(r){for(var t=atob(r.src.split(",")[1]),i=[],o=0;o<t.length;o++)i.push(t.charCodeAt(o));var l=new Blob([new Uint8Array(i)],{type:a.type});l.name=a.name,e.getSignature(l,function(r,t){return r?console.log(r):(c=t.url,a.name=t.fileName,void e.uploadFile(l,t.signed_request,function(e){return e?console.log(e):void n.$emit("fileUploadSuccess",c)}))})})}})}}}]);
app.directive("loading",["$window","User",function(n,i){return{templateUrl:"app/Loading/loading.html",transclude:!0,link:function(n,i,t){}}}]);
app.controller("MainCtrl",["$scope","MetaSettings","$state","LocalStore","User",function(e,t,o,i,s){t.setTitle("Makes wishes come true"),s.isInit(function(){return s.getUser()?o.go("profile"):void o.go("signup")})}]);
app.controller("PrivacyCtrl",["$scope","MetaSettings",function(t,e){e.setTitle("Privacy")}]);
app.factory("analytics",function(){return{identify:function(n){mixpanel.identify(n)},track:function(n,t){mixpanel.track(n,t)},setUser:function(n){mixpanel.people.set(n)}}});
app.factory("Auth",["$http","LocalStore","$rootScope","$state","$q","$timeout","User",function(t,e,n,u,i,r,o){function s(n){return e.setItem("auth-token"),t.post("/api/auth/local",n).success(o.init)}function c(n){return e.setItem("auth-token"),t.post("/api/user",n).success(o.init)}function a(t,e){o.init(t)}function l(t){return o.init({token:t})}function p(){return t.get("/api/user/profile/me")}function f(e){return t.put("/api/user",e).then(function(t){mixpanel.track("Settings changed"),a(t,"setting")})}function g(){r(function(){mixpanel.track("Logout"),e.setItem("auth-token"),n.$emit("webSocket",null),n.$emit("user",null),o.setUser(null),o.setWishlists(null),o.kill()},200).then(function(){u.go("login")})}function h(e){return t.get("/api/user/forgotpassword/"+e)}function k(e){return t.post("/api/user/resetPassword",e)}function m(){return t.get("/api/user")}function d(e){return t["delete"]("/api/user/"+e._id)}return{login:s,signup:c,logout:g,userIs:p,userSettings:f,loginWithToken:l,refresh:a,forgot:h,resetPassword:k,getUsers:m,deleteUser:d}}]);
app.factory("helpers",function(){function t(t,e,r){r=r||1e3,clearTimeout(n),n=setTimeout(function(){return t?e():void 0},r)}function e(){clearTimeout(n)}function r(t){var e=30;t&&(e=t);for(var r="",a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",n=0;e>n;n++)r+=a.charAt(Math.floor(Math.random()*a.length));return r}function a(t){return t.charAt(0).toUpperCase()+t.slice(1)}var n=0;return{typewatch:t,clearTypewatchTimer:e,makeId:r,capitalizeFirstLetter:a}});
app.factory("AuthInterceptor",["LocalStore","$q","$rootScope",function(e,r,t){"use strict";function o(r){var t=e.getItem("auth-token"),o=r.url.split(".");return t&&-1==o.indexOf("amazonaws")&&(r.headers=r.headers||{},r.headers.Authorization="Bearer "+t),r}return{request:o,responseError:function(o){var a=r.defer();return e.getItem("auth-token")&&t.$emit("error",o.status),a.reject(o),a.promise}}}]);
app.factory("LocalStore",["$window",function(t){function e(t){return JSON.parse(n.getItem(t))}function r(t,e){e?n.setItem(t,JSON.stringify(e)):t&&n.removeItem(t)}var n=t.localStorage;return{setItem:r,getItem:e}}]);
app.factory("MetaSettings",function(){var n="Wishero",t="Loading",e="",i="",r="";return{appName:function(){return n},title:function(){return t+" | "},setTitle:function(n){t=n},desc:function(n){return e},setDesc:function(n){e=n},version:function(){return i},setVersion:function(n){i=n},setSocialUrl:function(n){r=n},getSocialUrl:function(n){return r}}});
app.service("imageService",["$http","$q","$timeout",function(t,a,e){function n(t,a){t.center.x=(a+.5)*t.ratio,t.icenter.x=0|t.center.x;for(var i=0;i<t.dest.height;i++){t.center.y=(i+.5)*t.ratio,t.icenter.y=0|t.center.y;var c,h,d,o;c=h=d=o=0;for(var g,u=0,m=t.icenter.x-t.range2;m<=t.icenter.x+t.range2;m++)if(!(0>m||m>=t.src.width)){var l=1e3*Math.abs(m-t.center.x)|0;t.cacheLanc[l]||(t.cacheLanc[l]={});for(var v=t.icenter.y-t.range2;v<=t.icenter.y+t.range2;v++)if(!(0>v||v>=t.src.height)){var w=1e3*Math.abs(v-t.center.y)|0;void 0===t.cacheLanc[l][w]&&(t.cacheLanc[l][w]=s(Math.sqrt(Math.pow(l*t.rcpRatio,2)+Math.pow(w*t.rcpRatio,2))/1e3));var f=t.cacheLanc[l][w];f>0&&(g=4*(v*t.src.width+m),u+=f,h+=f*t.src.data[g+0],d+=f*t.src.data[g+1],o+=f*t.src.data[g+2],c+=f*t.src.data[g+3])}}g=4*(i*t.dest.width+a),t.dest.data[g+0]=h/u,t.dest.data[g+1]=d/u,t.dest.data[g+2]=o/u,t.dest.data[g+3]=c/u}++a<t.dest.width?a%16===0?e(function(){n(t,a)}):n(t,a):e(function(){r(t)})}function r(t){t.canvas.width=t.dest.width,t.canvas.height=t.dest.height,t.src=t.ctx.getImageData(0,0,t.dest.width,t.dest.height);for(var a,e=0;e<t.dest.width;e++)for(var n=0;n<t.dest.height;n++)a=4*(n*t.dest.width+e),t.src.data[a+0]=t.dest.data[a+0],t.src.data[a+1]=t.dest.data[a+1],t.src.data[a+2]=t.dest.data[a+2],t.src.data[a+3]=t.dest.data[a+3];t.ctx.putImageData(t.src,0,0),i(t)}function i(t){var a=new Image;a.onload=function(){t.resultD.resolve(a)},a.onerror=function(a){t.resultD.reject(a)},a.src=t.canvas.toDataURL(t.type,t.quality)}function c(t){var a=t.getContext("2d");return a.imageSmoothingEnabled=!0,a.mozImageSmoothingEnabled=!0,a.oImageSmoothingEnabled=!0,a.webkitImageSmoothingEnabled=!0,a}function h(t){var a=1/t;return function(e){if(e>t)return 0;if(e*=Math.PI,Math.abs(e)<1e-16)return 1;var n=e*a;return Math.sin(e)*Math.sin(n)/e/n}}var d=3,s=h(d);this.resize=function(t,r,h){var s={};return s.type="image/png",s.quality=1,s.resultD=a.defer(),s.canvas=document.createElement("canvas"),s.ctx=c(s.canvas),s.ctx.imageSmoothingEnabled=!0,s.ctx.mozImageSmoothingEnabled=!0,s.ctx.oImageSmoothingEnabled=!0,s.ctx.webkitImageSmoothingEnabled=!0,t.naturalWidth<=r||t.naturalHeight<=h?(console.log("FAST resizing image",t.naturalWidth,t.naturalHeight,"=>",r,h),s.canvas.width=r,s.canvas.height=h,s.ctx.drawImage(t,0,0,r,h),i(s)):(console.log("SLOW resizing image",t.naturalWidth,t.naturalHeight,"=>",r,h),s.canvas.width=t.naturalWidth,s.canvas.height=t.naturalHeight,s.ctx.drawImage(t,0,0,s.canvas.width,s.canvas.height),s.img=t,s.src=s.ctx.getImageData(0,0,s.canvas.width,s.canvas.height),s.dest={width:r,height:h},s.dest.data=new Array(s.dest.width*s.dest.height*4),s.ratio=t.naturalWidth/r,s.rcpRatio=2/s.ratio,s.range2=Math.ceil(s.ratio*d/2),s.cacheLanc={},s.center={},s.icenter={},e(function(){n(s,0)})),s.resultD.promise},this.resizeStep=function(t,e,n,r){function i(){return g=0|Math.max(g/2,e),u=0|Math.max(u/2,n),d.width=g,d.height=u,s.drawImage(l||t,0,0,g,u),m.src=d.toDataURL(o,r),e>=g||n>=u?h.resolve(m):(l||(l=new Image,l.onload=i),void(l.src=m.src))}r=r||1;var h=a.defer(),d=document.createElement("canvas"),s=c(d),o="image/png",g=t.naturalWidth,u=t.naturalHeight,m=new Image,l=null;return e>=g||n>=u||e>g/2||n>u/2?(d.width=e,d.height=n,s.drawImage(t,0,0,e,n),m.src=d.toDataURL(o,r),h.resolve(m)):i(),h.promise}}]);
app.factory("upload",["$http",function(n){function t(t,u){n.get("api/upload/sign_s3?file_name="+t.name+"&file_type="+t.type).then(function(n){return u(null,n.data)},function(n){return u(n)})}function u(t,u,e){n.put(u,t).then(function(n){return e(null,n.data)},function(n){return e(n)})}return{getSignature:t,uploadFile:u}}]);
app.factory("User",["$q","Wishlist","$timeout","$rootScope","LocalStore","$http","analytics",function(e,i,t,n,r,s,l){function a(){return A}function d(e){A=e}function o(e){return q?e():void t(function(){o(e)},1e3)}function u(n){q=!1;var s=e.defer();return n&&n.token&&r.setItem("auth-token",n.token),n&&n.user&&(A=n.user,l.identify(A._id)),n&&n.wishlists&&(L=n.wishlists,s.resolve(n.wishlists),q=!0),t(function(){r.getItem("auth-token")?i.fetch().then(function(e){function i(){return A&&A.firstName&&A.lastName?A.firstName+" "+A.lastName:A.username}function t(){return A&&"1970-01-01T00:00:00.000Z"===A.birthday?void 0:A.birthday}function n(){return A&&A.facebook?!0:!1}s.resolve(e.data.wishlist),L=e.data.wishlist,A=e.data.user,l.identify(A._id),l.setUser({$email:A.email,$username:A.username,$name:i(),wishes:g().items.length,wishlists:L.length,birthday:t(),friends:A.friends.length,facebook:n(),confirmed:A.confirmed||!1}),q=!0},function(e){q=!0}):(q=!0,s.resolve())},10),e.all([s.promise])}function f(){return L}function m(e){for(var i=0;i<L.length;i++)if(e===L[i]._id)return L[i];return null}function c(e){e=e}function h(e){var t=p(e._id);t=e,mixpanel.track("Wishlist updated"),i.updateWishlist(e)}function p(e){for(var i=0;i<L.length;i++)if(e===L[i]._id)return L[i]}function v(){var e=0,i=0;if(0===L.length)return null;for(var t=0;t<L.length;t++)e<=L[t].items.length&&(e=L[t].items.length,i=L[t]);return i._id}function g(){for(var e={},i=[],t=0;t<L.length;t++)i.push(L[t].items);return i=_.flatten(i),e.items=i,e}function W(){}function k(e,i){for(var t=0;t<e.items.length;t++)if(e.items[t].id==i.id)return!0;return!1}function w(e){var t=p(e.wishlistId);k(t,e)||(t.items.push(e),i.addItem(t,e).success(function(n){mixpanel.people.increment("wishes"),mixpanel.track("Wishlist item added"),n.url&&i.fetchItemData(e).success(function(n){n.img.length>0&&(e.img=n.img[0]),n.name&&(e.name=n.name),n.desc&&(e.desc=n.desc),$(e),i.updateItem(t,e)})}))}function x(e,i,t){for(var n=0;n<e.items.length;n++)if(e.items[n].id==i.id)return t(e.items[n],n,e);return t(null)}function I(e){var t=p(e.wishlistId);x(t,e,function(n,r,s){n&&(s.items.splice(r,1),mixpanel.people.increment("wishes",-1),mixpanel.track("Wishlist item removed"),i.deleteItem(t,e))})}function $(e){var t=p(e.wishlistId);x(t,e,function(n,r,s){n&&(s.items[r]=e,i.updateItem(t,e),mixpanel.track("Wishlist item updated"))})}function F(e){for(var i=0;i<L.length;i++)L[i]._id==e&&(L[i].items=[],n.showSubheader=!1,L.splice(i,1),mixpanel.people.increment("wishlists",-1),mixpanel.track("Wishlist deleted"))}function b(e){for(var i=!1,t=0;t<L.length;t++)L[t]._id==e._id&&(i=!0);i||(mixpanel.people.increment("wishlists"),mixpanel.track("Wishlist created"),L.push(e))}function y(e){return s.get("/api/user/friend/"+e)}function U(e){function i(){s["delete"]("/api/user/friend/"+e._id).then(function(e){n.$emit("error","Friend removed"),mixpanel.people.increment("friends",-1),mixpanel.track("Friend deleted")},function(e){n.$emit("error","Unable to remove friend")})}for(var t=0;t<A.friends.length;t++)e._id===A.friends[t]._id&&(A.friends.splice(t,1),i())}function N(e){for(var i=!1,t=0;t<A.friends.length;t++)e._id===A.friends[t]._id&&(i=!0);i||s.post("/api/user/friend/",{_id:e._id}).then(function(){A.friends.push(e),mixpanel.people.increment("friends"),mixpanel.track("Friend added")},function(e){n.$emit("error",e.data.error)})}function S(e){return mixpanel.track("Friend invited"),s.post("/api/user/invite",{email:e})}var L=[],q=!1,A=null;return{init:u,isInit:o,getWishlists:f,getWishlist:m,setWishlists:c,updateWishlist:h,kill:W,getUser:a,setUser:d,mostWishlistItems:v,addWishListItem:w,removeWishlistItem:I,updateWishlistItem:$,getAllWishes:g,createWishlist:b,deleteWishlist:F,getFriends:y,addFriend:N,deleteFriend:U,inviteFriend:S}}]);
app.factory("Wishlist",["$http","$rootScope",function(t,i){function e(){return t.get("api/wishlist")}function s(i){return t.get("api/wishlist/"+i)}function n(i){return t.post("api/wishlist/",i)}function u(i){return t.put("api/wishlist/"+i._id,i)}function r(i){return t["delete"]("api/wishlist/"+i._id)}function l(i,e){return t.post("api/wishlist/"+i._id,e)}function p(i,e){return t.put("api/wishlist/"+i._id+"/"+e.id,e)}function a(i,e){return t["delete"]("api/wishlist/"+i._id+"/"+e.id)}function h(i){return t.post("api/wishlist/getImages",{url:i.url})}return{fetch:e,getWishlist:s,createWishlist:n,updateWishlist:u,deleteWishlist:r,addItem:l,updateItem:p,deleteItem:a,fetchItemData:h}}]);
app.controller("UserCtrl",["MetaSettings","$scope","$stateParams","$http","$window","User","$rootScope",function(e,t,n,r,s,i,o){function a(e){return e.charAt(0).toUpperCase()+e.slice(1)}e.setTitle(a(n.username)+"'s wishlist"),t.loading=!0,r.get("api/user/public/"+n.username).then(function(e){mixpanel.track("Viewing friend's wishes"),o.$broadcast("pub",e.data),t.pubUser=e.data,t.loading=!1},function(){t.loading=!1,t.pubUser=null,t.$emit("error"," The username could not be found. Check if the url is looking legit."),t.userStatus="User not found."})}]);
app.directive("user",function(){return{templateUrl:"app/User/user.html",scope:{},controller:["$scope","md5","Auth","LocalStore","User","$mdDialog","$http",function(e,t,r,o,c,s,a){e.userAction=r,c.isInit(function(){function r(e,t,r){e.send=function(e){t.hide(e)}}e.user=c.getUser(),e.$watch(function(){return c.getUser()},function(r,o){r!==o&&(e.user=r),e.user&&e.user.facebook&&(e.user.facebook.displayName=e.user.facebook.displayName.split(" "),e.user.facebook.displayName=e.user.facebook.displayName[0],e.user.picture||(e.user.picture="http://graph.facebook.com/"+e.user.facebook.id+"/picture?width=300")),e.user&&!e.user.facebook&&e.user.email&&!e.user.picture&&(e.user.picture="http://www.gravatar.com/avatar/"+t.createHash(e.user.email)+"?s=300")}),e.feedback=function(e){s.show({templateUrl:"app/Directives/feedback/feedback.html",clickOutsideToClose:!0,targetEvent:e,preserveScope:!0,locals:{},controller:r}).then(function(e){a.post("api/user/feedback",e)})},r.$inject=["$scope","$mdDialog","$http"]})}]}});
app.controller("WishlistCtrl",["$scope","MetaSettings","$state","User",function(s,e,t,r){e.setTitle("Wishlist"),e.setSocialUrl(t.params.username),e.setDesc("Check out my wishes at Wishero.co. Create and share your wishlist too."),s.wishlistId=function(){return t.params.id},r.isInit(function(){!r.getUser()&&t.params.username&&t.go("user",{username:t.params.username})})}]);
app.directive("wishlist",function(){return{templateUrl:"app/Wishlist/wishlist.template.html",transclude:!0}});
app.controller("AdminCtrl",["$http","$scope","MetaSettings","Auth",function(e,t,n,s){n.setTitle("Admin"),s.getUsers().then(function(e){t.users=e.data}),t["delete"]=function(e){s.deleteUser(e).then(function(n){for(var s=0;s<t.users.length;s++)t.users[s]._id===e._id&&t.users.splice(s,1)})}}]);
app.controller("ForgotCtrl",["$scope","MetaSettings","Auth","$mdDialog",function(o,t,e,n){t.setTitle("Forgot password"),o.loginFb=function(){window.location.href="/api/auth/facebook"},o.submitForm=function(t){o.error="",o.loading=!0,e.forgot(t.username).then(function(){o.loading=!1,n.show(n.alert().parent(angular.element(document.querySelector("#popupContainer"))).clickOutsideToClose(!0).title("Reset password").content("We have sent you a reset password link to your email. Check your inbox and spam folder.").ariaLabel("Reset passord").ok("Got it!").targetEvent())})["catch"](function(t){o.loading=!1,o.error=t.data})}}]);
app.controller("ResetCtrl",["$scope","MetaSettings","Auth","$stateParams","$mdDialog","$state",function(e,t,s,o,a,r){t.setTitle("Reset password"),e.submitForm=function(t){e.error="",e.loading=!0,s.resetPassword({password:t.password,resetToken:o.forgotPasswordToken}).then(function(t){var s;e.loading=!1,"success"==t.data.message&&(s="Success! Your password has been changed.",r.go("login")),a.show(a.alert().parent(angular.element(document.querySelector("#popupContainer"))).clickOutsideToClose(!0).title("Reset password").content(s).ariaLabel("Reset passord").ok("Got it!").targetEvent())})["catch"](function(t){e.loading=!1,e.error=t.data})}}]);
app.controller("ProfileCtrl",["$scope","MetaSettings","Wishlist","User","Auth",function(e,t,i,s,r){t.setTitle("My profile"),e.$on("fileUploadSuccess",function(t,i){e.user.picture=i,mixpanel.track("Added profile picture"),r.userSettings(e.user)}),s.isInit(function(){e.user=s.getUser(),e.wishes=s.getAllWishes().items.length,e.$watch(function(){return s.getUser()},function(t,i){t!==i&&(e.user=t)})})}]);
app.controller("LoginCtrl",["$scope","MetaSettings","Auth","LocalStore","$state","User",function(e,t,n,o,i,a){t.setTitle("Login"),e.loginFb=function(){window.location.href="/api/auth/facebook"},e.submitForm=function(t){e.error="",e.loading=!0,t.username&&(t.username=t.username.toLowerCase()),n.login(t).then(function(e){a.isInit(function(){mixpanel.track("Login"),i.go("wishlist",{username:a.getUser().username,id:a.mostWishlistItems()})})})["catch"](function(t){e.error=t.data.message,e.loading=!1,e.$emit("error","Login failed: "+t.data.message)})}}]);
app.controller("TokenCtrl",["$scope","User","$stateParams","$state",function(e,t,s,n){t.init({token:s.token}).then(function(){var e=t.mostWishlistItems();return e?(mixpanel.track("Facebook login"),void n.go("wishlist",{username:t.getUser().username,id:e})):n.go("createWishlist")})}]);
app.controller("SettingsCtrl",["$scope","MetaSettings","Auth","LocalStore","$timeout","$state","User",function(e,r,t,s,i,o,a){r.setTitle("Settings"),a.isInit(function(){e.user=a.getUser(),e.form={firstName:e.user.firstName,lastName:e.user.lastName,birthday:new Date(e.user.birthday),username:e.user.username,email:e.user.email}}),e.submitForm=function(){e.error="",e.form.birthday&&e.form.birthday.setHours(2),t.userSettings(e.form).then(function(){e.error="",o.go("profile")},function(r){var t=r.data.errors,s=[];for(var i in t)s.push(t[i].message);e.error=s.join(" & ")})}}]);
app.controller("SignupCtrl",["$scope","MetaSettings","Auth","User","$state",function(r,e,o,n,a){e.setTitle("Signup"),r.loginFb=function(){window.location.href="/api/auth/facebook"},r.submitForm=function(e){r.loading=!0,o.signup(e).then(function(r){n.isInit(function(){mixpanel.track("Signup"),ga("send","event","signup","Signup success"),goog_report_conversion(),a.go("createWishlist")})})["catch"](function(e){r.loading=!1,r.error="",e.data.errors.username&&(r.error=e.data.errors.username.message),e.data.errors.username&&e.data.errors.email&&(r.error=r.error+" & "),e.data.errors.email&&(r.error=r.error+e.data.errors.email.message)})}}]);
app.directive("error",["$rootScope","Auth","$state","$mdToast",function(o,t,r,e){return{link:function(n,i,u){o.$on("error",function(o,n){return 401===n?t.logout():403===n?(o.preventDefault(),r.go("main")):void("string"==typeof n&&e.showSimple(n))})}}}]);
app.controller("HeaderCtrl",["$scope","User","$mdSidenav","Auth",function(t,n,o,e){t.toggleSidenav=function(t){o(t).toggle()},t.$watch(function(){return n.getUser()},function(n,o){n!==o&&(t.user=n)}),t.logout=function(){e.logout()}}]);
app.controller("SidebarCtrl",["$scope","User",function(r,e){}]);
app.directive("sidebar",["User",function(e){return{templateUrl:"app/Commons/Sidebar/sidebar.html",scope:{},link:function(t,n,i){n.parent().addClass("hide"),t.user=e.getUser(),t.$watch(function(){return e.getUser()},function(e,i){e!==i&&(t.user=e,e||n.parent().addClass("hide"),e&&n.parent().removeClass("hide"))})},controller:["$scope","$rootScope","Wishlist","$state","$mdSidenav","$mdDialog","$log","$http","$q","MetaSettings","User","$timeout",function(e,t,n,i,r,s,o,a,d,c,u,l){function f(e,t,n){e.querySearch=function(e){return deferred=d.defer(),n.typewatch(e,function(){u.getFriends(e).success(function(e){deferred.resolve(e)})}),deferred.promise},e.isEmail=function(e){var t=/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;return t.test(e)},e.sendInvite=function(n){u.inviteFriend(n).then(function(n){e.$emit("error","Invite has been sent!"),e.searchText="",t.hide(e.item)},function(t){e.$emit("error",t.data)})},e.cleanUser=function(e){return e.firstName||e.lastName?e.username+", "+e.firstName+" "+e.lastName:e.username},e.addFriend=function(){t.hide(e.item)}}e.toggleSidenav=function(e){r(e).toggle()},l(function(){e.wishlists=u.getWishlists(),e.$watch(function(){return u.getWishlists()},function(t,n){t!==n&&(e.wishlists=t)})},10),e.addFriend=function(e){s.show({templateUrl:"app/Friend/addFriend.html",clickOutsideToClose:!0,targetEvent:e,preserveScope:!0,locals:{},controller:f}).then(function(e){e&&u.addFriend(e)})},e.removeFriend=function(e){u.deleteFriend(e)},f.$inject=["$scope","$mdDialog","helpers"]}]}}]);
app.directive("acceptCookies",["LocalStore","$timeout",function(e,t){return{templateUrl:"app/Directives/acceptCookies/acceptCookies.html",scope:{},link:function(c,o,i){t(function(){e.getItem("cookiesAccepted")||(c.acceptCookies=!0)},100),c.accept=function(){e.setItem("cookiesAccepted",!0),o.find("div").addClass("slideOutDown")}}}}]);
app.directive("confirmAccount",["LocalStore","$timeout","User","$http",function(n,t,e,i){return{templateUrl:"app/Directives/confirmAccount/confirmAccount.html",scope:{},link:function(n,t,o){e.isInit(function(){n.user=e.getUser(),n.$watch(function(){return e.getUser()},function(t,e){t!==e&&(n.user=t)})}),n.text="Your account is not confirmed. Click here to send a confirmation email.",n.showBtn=!0,n.accept=function(){i.get("/api/user/confirm/send").then(function(){n.text="Confirmation email has been sent. Check your inbox and spam folder.",n.showBtn=!1,setTimeout(function(){t.find("div").addClass("slideOutDown")},3e3)})}}}}]);
app.directive("feedback",["$mdDialog","$http",function(e,c){return{template:'<span ng-click="feedback($event)" class="feedback">Give feedback</span>',scope:{},controller:["$scope",function(t){function n(e,c,t){e.send=function(e){c.hide(e)}}t.feedback=function(t){e.show({templateUrl:"app/Directives/feedback/feedback.html",clickOutsideToClose:!0,targetEvent:t,preserveScope:!0,locals:{},controller:n}).then(function(e){c.post("api/user/feedback",e)})},n.$inject=["$scope","$mdDialog","$http"]}]}}]);
app.directive("welcome",["$rootScope","$window","LocalStore","$state","$timeout","User",function(e,n,t,o,i,a){return{templateUrl:"app/Directives/welcome/welcome.template.html",scope:{},link:function(e,n,c){function u(){n.children().addClass("fadeOut animated"),i(function(){n.remove()},300)}function d(){p.classList.add("fadeOut"),i(function(){r(p)},300)}function s(){l(v),f.removeClass("ng-hide").addClass("fadeInCover"),i(function(){l(w),g.removeClass("ng-hide").addClass("fadeInDown")},600)}function l(e){e.style.display="block"}function r(e){e.style.display="none"}function m(){-1!=I.indexOf(o.current.name)&&u()}var f=n.find("img"),g=n.find("span"),p=document.getElementById("loading"),v=(document.getElementById("welcome"),document.getElementById("cover")),w=document.getElementById("text"),y=t.getItem("auth-token"),I=["user","forgot","resetPassword","login","signup","wishlist","about","privacy"];e.about=function(){o.go("about"),u()},e.welcome=function(){o.go("signup"),u()},a.isInit(function(){return d(),y?u():(m(),s(),void setTimeout(function(){return"main"===o.current.name?o.go("signup"):void 0},1e3))})}}}]);
app.directive("addItem",["$mdDialog",function(e){return{scope:{},link:function(t,i,m){function n(e,t,i,m,n){e.addItem=function(){if(e.newItem.item&&i.params.id){var a={wishlistId:i.params.id,priority:0,id:m.makeId(5)};is.url(e.newItem.item)?a.url=e.newItem.item:a.name=e.newItem.item,n.addWishListItem(a),t.cancel()}}}i.bind("click",function(t){e.show({templateUrl:"app/Wishlist/addItem/addItem.template.html",clickOutsideToClose:!0,targetEvent:t,controller:n})}),n.$inject=["scope","$mdDialog","$state","helpers","User"]}}}]);
app.directive("editItem",["$mdDialog",function(t){return{scope:{item:"@",wishlist:"@"},link:function(i,e,n){function l(t,i,e,n,l,m,a){t.item=e,t.wishlist=n,t.save=function(){l.updateWishlistItem(t.item),i.hide()},t["delete"]=function(){l.removeWishlistItem(t.item),i.cancel()},t.typewatch=function(){a.typewatch(t.item.url,function(){is.url(t.item.url)&&(t.loading=!0,m.fetchItemData(t.item).then(function(i){i.data.img.length>0&&!t.item.img&&(t.item.img=i.data.img[0]),i.data.name&&!t.item.name&&(t.item.name=i.data.name),t.loading=!1},function(){t.loading=!1}))})}}e.bind("click",function(i){var e=JSON.parse(n.item);e.wishlistId=n.wishlist;var m={_id:n.wishlist};t.show({templateUrl:"app/Wishlist/editItem/editItem.template.html",clickOutsideToClose:!0,targetEvent:i,locals:{item:e,wishlist:m},controller:l})}),l.$inject=["scope","$mdDialog","item","wishlist","User","Wishlist","helpers"]}}}]);
app.directive("wishlistEmptyState",["User","$state","Wishlist","helpers",function(t,i,s,e){return{templateUrl:"app/Wishlist/empty/emptyState.template.html",scope:{},link:function(s,a,l){t.isInit(function(){i.params.id?(s.wishlist=t.getWishlist(i.params.id),null===s.wishlist&&(s.hideEmptyState=!0),s.$watch(function(){return t.getWishlist(i.params.id)},function(t,i){t!==i&&(s.wishlist=t,null===s.wishlist&&(s.hideEmptyState=!0))})):s.hideEmptyState=!0}),s.addItem=function(s){if(s){var a=({_id:i.params.id},{wishlistId:i.params.id,priority:0,id:e.makeId(5)});is.url(s)?a.url=s:a.name=s,t.addWishListItem(a)}}}}}]);
app.directive("wishlistItems",["User","$state","$mdDialog","Wishlist","helpers",function(i,t,s,e,l){return{templateUrl:"app/Wishlist/item/item.template.html",scope:{},link:function(s,e,l){i.isInit(function(){t.params.id&&(s.wishlist=i.getWishlist(t.params.id),s.$watch(function(){return i.getWishlist(t.params.id)},function(i,t){i!==t&&(s.wishlist=i)}))})}}}]);
app.directive("itemGrid",["User","$state","$rootScope","$timeout",function(t,i,s,e){return{templateUrl:"app/Wishlist/itemGrid/itemGrid.template.html",scope:{pub:"@"},link:function(i,s,e){t.isInit(function(){e.show&&e.show.length>20&&(i.showExtras=!0,i.wishlist=t.getWishlist(e.show),i.$watch(function(){return t.getWishlist(e.show)},function(t,s){t!==s&&(i.wishlist=t)})),"all"===e.show&&(i.wishlist=t.getAllWishes(),i.showExtras=!1)}),i.$on("pub",function(t,s){i.showExtras=!1;for(var e=s.wishlists,h=[],o=0;o<e.length;o++)h.push(e[o].items);h=_.flatten(h),i.wishlist={items:h}})}}}]);
app.directive("wishlistMissing",["$state","User",function(i,s){return{templateUrl:"app/Wishlist/missing/missing.template.html",scope:{},link:function(t,l,n){s.isInit(function(){t.wishlist=s.getWishlist(i.params.id),t.$watch(function(){return s.getWishlist(i.params.id)},function(i,s){i!==s&&(t.wishlist=i,null===i&&(t.wishlistStatus="Wishlist deleted"))}),null===t.wishlist&&(t.wishlistStatus="Wishlist not found")})}}}]);
app.directive("wishlistName",["Wishlist","User","$state","helpers",function(i,t,s,n){return{templateUrl:"app/Wishlist/name/wishlistName.html",scope:{},controller:["$scope",function(i){t.isInit(function(){i.wishlist=t.getWishlist(s.params.id),i.$watch(function(){return t.getWishlist(s.params.id)},function(t,s){t!==s&&(i.wishlist=t)})}),i.updateWishlist=function(i){n.clearTypewatchTimer(),t.updateWishlist(i)},i.typewatch=function(){n.typewatch(i.wishlist.name,function(){i.wishlist.name&&t.updateWishlist(i.wishlist)})}}],link:function(i,t,s){t.on("submit",function(){t.find("input").blur()})}}}]);
app.controller("subheaderCtrl",["$scope","User","Wishlist","$state","$timeout","$rootScope",function(e,t,i,s,l,o){t.isInit(function(){"wishlist"==s.current.name&&(o.showSubheader=!0)}),e.deleteWishlist=function(){t.deleteWishlist(s.params.id),i.deleteWishlist({_id:s.params.id})}}]);
app.directive("subHeader",["$timeout","$state","$rootScope","User",function(e,t,i,s){return{templateUrl:"app/Wishlist/subHeader/subheader.template.html",scope:{},link:function(e,n,a){var r=["wishlist"];s.isInit(function(){function n(t){r.indexOf(t)>-1?e.showSubheader=!0:e.showSubheader=!1}i.$on("$stateChangeSuccess",function(e,i){n(t.current.name)}),n(t.current.name),e.wishlist=s.getWishlist(t.params.id),e.$watch(function(){return s.getWishlist(t.params.id)},function(t,i){t!==i&&(e.wishlist=t,null===t&&(e.showSubheader=!1))}),null===e.wishlist&&(e.showSubheader=!1)}),e.deleteWishlist=function(){s.deleteWishlist(t.params.id),Wishlist.deleteWishlist({_id:t.params.id})}}}}]);
//# sourceMappingURL=data:application/json;base64,
